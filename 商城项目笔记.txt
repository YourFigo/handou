电商行业的一些常见模式：
    B2C：商家对个人，如：亚马逊、当当等
    C2C平台：个人对个人，如：闲鱼、拍拍网、ebay
    B2B平台：商家对商家，如：阿里巴巴、八方资源网等
    O2O：线上和线下结合，如：饿了么、电影票、团购等
    P2P：在线金融，贷款，如：网贷之家、人人聚财等。
    B2C平台：天猫、京东、一号店等

一些专业术语
SaaS：软件即服务
SOA：面向服务
RPC：远程过程调用
RMI：远程方法调用
PV：(page view)，即页面浏览量；
    用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计
UV：(unique visitor)，独立访客
    指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。
PV与带宽：
    计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。
    计算公式是：网站带宽= ( PV * 平均页面大小（单位MB）* 8 )/统计时间（换算到秒）
    为什么要乘以8？
    网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit
    这个计算的是平均带宽，高峰期还需要扩大一定倍数
PV、QPS、并发
    QPS：每秒处理的请求数量。
    比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。
    由PV和QPS如何需要部署的服务器数量？
    根据二八原则，80%的请求集中在20%的时间来计算峰值压力：
    （每日PV * 80%） / （3600s * 24 * 20%） * 每个页面的请求数  = 每个页面每秒的请求数量
    然后除以服务器的QPS值，即可计算得出需要部署的服务器数量
	
环境：
jdk 1.8
maven 3.5
springboot 2.0
springcloud Finchley.SR2
mybatis 1.3


模块：
handou：项目整体父工程
handou-registry：服务注册中心（eureka）
handou-gateway：网关和过滤器（zuul）
handou-item：商品聚合模块
    handou-item-interface：负责商品模块对外接口的子模块
    handou-item-service：负责商品模块对内业务的子模块
handou-common：通用工具类模块

es6语法
var 有一个问题，就是定义的变量有时会莫名奇妙的成为全局变量。let 所声明的变量，只在 let 命令所在的代码块内有效。const 声明的变量是常量，不能被修改。

ES6为字符串扩展了几个新的API：
    includes()：返回布尔值，表示是否找到了参数字符串。
    startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
    endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。

在两个`之间的部分都会被作为字符串的值，不管你任意换行，比如：
    let str = `hello
        world`

解构表达式：结构数组和对象
    let arr = [1,2,3]
    const [x,y,z] = arr; // x，y，z将与arr中的每个位置对应来取值
    const person = {name:"jack",age:21,language: ['java','js','css']}
    const {name,age,language} = person;  // 解构表达式获取值

给函数设置默认值
es6可以设默认值：
    function fun(a , b = 1) {
        return a / b;
    }
es6之前需要这样设置：
    function fun(a , b) {
        // 判断b是否为空，为空就给默认值1
        b = b || 1;
        return a / b;
    }

箭头函数： ()=>{}
一个参数：
    let fun = (i) => {console.log(i)} 可以简写为：
    let fun = i => console.log(i);
    调用： fun(10);
多个参数：
    let fun = (i,j) => {
        const k = i+j;
        console.log(k);
        }
    调用： fun(10,20);
对象的函数属性简写:
    let person = {
        name: "jack",
        // 以前：
        eat1: function (food) {
            console.log(this.name + "在吃" + food);
        },
        // 箭头函数版：
        eat2: food => console.log(person.name + "在吃" + food), //这里拿不到this
        // 简写版：
        eat3(food){
            console.log(this.name + "在吃" + food);
        }
    }
    调用：
        person.eat1("鸡蛋");
        person.eat2("苹果");
        person.eat3("香蕉");
箭头函数结合解构表达式：
有一个对象：
const person = {
    name:"jack",
    age:21,
    language: ['java','js','css']
}
我们要写一个函数只输出对象中的 name 属性，可以这么写：
function hello(person) {
    console.log("hello," + person.name)
}
如果使用箭头函数结合解构函数，参数不需要传入一个大对象：
var hi = ({name}) =>  console.log("hi," + name);

map和reduce
map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。
    let arr = ['1','20','-5','3'];
    arr = arr.map(s => parseInt(s));
reduce()：接收一个函数（必须）和一个初始值（可选）。
第一个参数（函数）接收两个参数：
    第一个参数是上一次reduce处理的结果
    第二个参数是数组中要处理的下一个元素
reduce()会从左到右依次把数组中的元素用reduce处理，并把处理的结果作为下次reduce的第一个参数。如果是第一次，会把前两个元素作为计算参数，或者把用户指定的初始值作为起始参数。
const arr = [1,20,-5,3];
arr.reduce((a,b)=>a+b);  //结果是 19
arr.reduce((a,b)=>a+b,10);  //结果是 29

Object拓展方法:
keys(obj)：获取对象的所有key形成的数组
values(obj)：获取对象的所有value形成的数组
entries(obj)：获取对象的所有key和value形成的二维数组。格式：[[k1,v1],[k2,v2],...]
assign(dest, ...src)：将多个src对象的值 拷贝到 dest中（浅拷贝）
比如：
    p2={name:"jack",age:12};
    Object.keys(p2);
    Object.values(p2);
    Object.entries(p2);
    p3={sex:"f"};
    Object.assign(p2,p3);

数组拓展方法：
find(callback)：数组实例的find方法，用于找出第一个符合条件的数组成员。
    它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。
findIndex(callback)：数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 
includes(数组元素)：与find类似，如果匹配到元素，则返回true，代表找到了。
    arr = [10, 20, 30];
    arr.find(a=>a>15);  //结果为20
    arr.findIndex(a=>a>23);  //结果为2
    arr.includes(20);  //结果为true

安装nodejs并配置
    node -v
NPM是Node提供的模块管理工具，可以非常方便的下载安装很多前端框架，包括Jquery、AngularJS、VueJs都有。
    npm -v
nrm是切换npm源镜像的工具，国外镜像比较慢，可以换成taobao镜像
    npm install nrm -g
    nrm ls
    nrm test
    nrm use taobao

vue：是一种基于nodejs的MVVM模式的前端框架
node.js的伟大之处不在于让JS迈向了后端开发，而是构建了一个庞大的生态系统。
    基于事件循环的异步IO
    单线程运行，避免多线程的变量同步问题
    JS可以编写后台代码，前后台统一编程语言
MVVM模式
    M：即Model，模型，包括数据和一些基本操作
    V：即View，视图，页面渲染结果
    VM：即View-Model，模型与视图间的双向操作（无需开发人员干涉）
在MVVM之前，开发人员从后端获取需要的数据模型，然后要通过DOM操作Model渲染到View中。而后当用户操作视图，我们还需要通过DOM获取View中的数据，然后同步到Model中。
而MVVM中的VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何互相影响的：
    只要我们Model发生了改变，View上自然就会表现出来。
    当用户修改了View，Model中的数据也会跟着改变。

初始化vue项目：
    进入一个项目目录，先输入：npm init -y 进行初始化
    然后输入命令：npm install vue --save  安装Vue
    然后就会在hello-vue目录发现一个node_modules目录，并且在下面有一个vue目录。

一个简单的例子
    <!--vue对象的html模板-->
    <body>
        <div id="app">
            <h2>{{name}}，非常帅！！！</h2>
        </div>
    </body>
<!--vue对象的html模板-->
<div id="app">
    <!--双向绑定，v-model:数据模型-->
    <input type="text" v-model="num">
    <!-- v-on:事件名=js表达式-->
    <input type="button" value="点我" v-on:click="incr">
    <!-- 花括号:js表达式-->
    <h2>大家好，我是{{name}}，有{{num}}位妹子</h2>
</div>
</body>
<script src="node_modules/vue/dist/vue.js" ></script>
<script>
    // 创建vue实例
    var app = new Vue({
        el:"#app", // el即element，该vue实例要渲染的页面元素
        data:{ // 渲染页面需要的数据
            name: "飞哥",
            num: 100
        },
        methods:{
            incr(){
                this.num++;
            }
        }
    });
</script>
执行过程：
首先通过 new Vue()来创建Vue实例
然后构造函数接收一个对象，对象中有一些属性：
    el：是element的缩写，通过id选中要渲染的页面元素，本例中是一个div
    data：数据，数据是一个对象，里面有很多属性，都可以渲染到视图中
        name：这里我们指定了一个name属性
页面中的h2元素中，我们通过{{name}}的方式，来渲染刚刚定义的name属性。
我们在data添加了新的属性：num
在页面中有一个input元素，通过v-model与num进行绑定。
同时通过{{num}}在页面输出

生命周期钩子
每个 Vue 实例在被创建时都要经过一系列的初始化过程 ：创建实例，装载模板，渲染模板等等。Vue为生命周期中的每个状态都设置了钩子函数（监听函数）。
每当Vue实例处于不同的生命周期时，对应的函数就会被触发调用。
钩子函数：
    beforeCreated：我们在用Vue时都要进行实例化，因此，该函数就是在Vue实例化时调用，也可以将他理解为初始化函数比较方便一点，在Vue1.0时，这个函数的名字就是init。 
    created：在创建实例之后进行调用。 
    beforeMount：页面加载完成，没有渲染。如：此时页面还是{{name}}
    mounted：我们可以将他理解为原生js中的window.onload=function({.,.}),或许大家也在用jquery，所以也可以理解为jquery中的$(document).ready(function(){….})，他的功能就是：在dom文档渲染完毕之后将要执行的函数，该函数在Vue1.0版本中名字为compiled。 此时页面中的{{name}}已被渲染成峰哥
    beforeDestroy：该函数将在销毁实例前进行调用 。
    destroyed：改函数将在销毁实例时进行调用。
    beforeUpdate：组件更新之前。
    updated：组件更新之后。
钩子函数不能放在实例的methods中。

指令：
指令 (Directives) 是带有 v- 前缀的特殊特性。
指令特性的预期值是：单个 JavaScript 表达式。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。 

插值表达式：
    1、花括号：{{表达式}}
        该表达式支持JS语法，可以调用js内置函数（必须有返回值）
        表达式必须有返回结果。例如 1 + 1，没有结果的表达式不允许使用，如：var a = 1 + 1;
        可以直接获取Vue实例中定义的数据或函数
    2、插值闪烁：
        使用{{}}方式在网速较慢时会出现问题。在数据未加载完成时，页面会显示出原始的{{}}，加载完毕后才显示正确数据，我们称为插值闪烁。
    3、v-text和v-html
        使用v-text和v-html指令来替代{{}}
        v-text：将数据输出到元素内部，如果输出的数据有HTML代码，会作为普通文本输出
        v-html：将数据输出到元素内部，如果输出的数据有HTML代码，会被渲染

v-model
    刚才的v-text和v-html可以看做是单向绑定，数据影响了视图渲染，但是反过来就不行。接下来学习的v-model是双向绑定，视图（View）和模型（Model）之间会互相影响。
    既然是双向绑定，一定是在视图中可以修改数据，这样就限定了视图的元素类型。目前v-model的可使用元素有：input、select、textarea、checkbox、radio、components
    多个CheckBox对应一个model时，model的类型是一个数组，单个checkbox值默认是boolean类型
    radio对应的值是input的value值
    text 和textarea 默认对应的model是字符串
    select单选对应字符串，多选对应也是数组

v-on
    v-on指令用于给页面元素绑定事件。
    v-on:事件名="js片段或函数名"
    另外，事件绑定可以简写，例如 v-on:click='add' 可以简写为 @click='add'
    
    事件修饰符：
    在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。
    尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。
    Vue.js 为 v-on 提供了事件修饰符
        .stop ：阻止事件冒泡到父元素
        .prevent：阻止默认事件发生
        .capture：使用事件捕获模式
        .self：只有元素自身触发事件才执行。（冒泡或捕获的都不执行）
        .once：只执行一次

    按键修饰符：
    在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：keyup.enter 或者 keyup.13
    .enter  .tab   .delete (捕获“删除”和“退格”键)  .esc  .space   .up  .down  .left  .right

    组合按钮
    可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。
    .ctrl  .alt  .shift
    比如alt+c 为 keyup.alt.67

v-for
    遍历数组：v-for="item in items"
    数组下标：v-for="(item,index) in items"
    var vm = new Vue({
        el:"#app",
        data:{
            user:{name:'峰哥', gender:'男', age: 18},
            users:[
                {name:'柳岩', gender:'女', age: 21},
                {name:'峰哥', gender:'男', age: 18},
                {name:'范冰冰', gender:'女', age: 24},
            ],
        }
    })

    <ul>
        <li v-for="(user, index) in users">
            {{index + 1}}. {{user.name}} - {{user.gender}} - {{user.age}}
        </li>
    </ul>
    遍历对象：
    <ul>
        <li v-for="(val,key,index) in user">{{index}}.{{key}}:{{val}}</li>
    </ul>

v-if：
    v-if，条件判断。当得到结果为true时，所在的元素才会被渲染。
    语法： v-if="布尔表达式"
    v-if、v-else-if、v-else的使用
    <div id="app">
        <input type="button" value="点我呀，生成随机数" @click="random=Math.random()">{{random}}<br>
        <span v-if="random > 0.75">你看到我了说明我大于0.75</span>
        <span v-else-if="random > 0.5">你看到我了说明我大于0.5</span>
        <span v-else-if="random > 0.25">你看到我了说明我大于0.25</span>
        <span v-else>你看到我了说明我大于0</span>
    </div>
    <script src="./node_modules/vue/dist/vue.js"></script>
    <script type="text/javascript">
        var app = new Vue({
            el: "#app",
            data: {
                random:0
            }
        })
    </script>

v-if和v-for结合使用
    <ul>
        <li v-if="user.gender=='女'" v-for="(user,index) in users">{{index+1}}.{{user.name}}-{{user.gender}}-{{user.age}}</li>
    </ul>

v-show：使用和v-if基本相似，不同的是v-show的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display,因此v-if的效率要高。