电商行业的一些常见模式：
    B2C：商家对个人，如：亚马逊、当当等
    C2C平台：个人对个人，如：闲鱼、拍拍网、ebay
    B2B平台：商家对商家，如：阿里巴巴、八方资源网等
    O2O：线上和线下结合，如：饿了么、电影票、团购等
    P2P：在线金融，贷款，如：网贷之家、人人聚财等。
    B2C平台：天猫、京东、一号店等

一些专业术语
SaaS：软件即服务
SOA：面向服务
RPC：远程过程调用
RMI：远程方法调用
PV：(page view)，即页面浏览量；
    用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计
UV：(unique visitor)，独立访客
    指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。
PV与带宽：
    计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。
    计算公式是：网站带宽= ( PV * 平均页面大小（单位MB）* 8 )/统计时间（换算到秒）
    为什么要乘以8？
    网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit
    这个计算的是平均带宽，高峰期还需要扩大一定倍数
PV、QPS、并发
    QPS：每秒处理的请求数量。
    比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。
    由PV和QPS如何需要部署的服务器数量？
    根据二八原则，80%的请求集中在20%的时间来计算峰值压力：
    （每日PV * 80%） / （3600s * 24 * 20%） * 每个页面的请求数  = 每个页面每秒的请求数量
    然后除以服务器的QPS值，即可计算得出需要部署的服务器数量


环境：
jdk 1.8
maven 3.5
springboot 2.0
springcloud Finchley.SR2
mybatis 1.3


模块：
handou：项目整体父工程
handou-registry：服务注册中心（eureka）
handou-gateway：网关和过滤器（zuul）
handou-item：商品聚合模块
    handou-item-interface：负责商品模块对外接口的子模块
    handou-item-service：负责商品模块对内业务的子模块
handou-common：通用工具类模块
handou-upload：整个项目的文件上传服务
handou-manage-web：商城后台管理平台的前端Vue页面

域名和端口：
网站访问：manage.handou.com
api调用：api.handou.com/api
图片上传：image.handou.com
访问和调用都是80端口，由nginx监听并反向代理
zuul：10010
eureka：10086
item：8081
upload：8082
前端webpack：9001


导入 handou-manage-web 项目
package.json中定义了我们所需的一切依赖，安装依赖需要在控制台运行命令：
    npm install
安装好依赖后，可以在package.json中启动项目，运行：
    npm run dev

看一下handou-manage-web的目录结构：
handou-manage-web
├─build
├─config
├─dist
├─node_modules
├─src
│  ├─assets
│  ├─components
│  │  ├─cascader
│  │  ├─form
│  │  ├─messages
│  │  └─tree
│  ├─pages
│  │  ├─item
│  │  │  └─specification
│  │  ├─trade
│  │  └─user
│  ├─router
│  │  └─index.js
│  ├─App.vue
│  ├─config.js
│  ├─http.js
│  ├─main.js
│  └─menu.js
├─static
├─index.html
└─package.json

build：各种编译用的配置文件，package.json中的scripts里面有调用
config：webpack配置文件（webpack：是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。并且提供了前端项目的热部署插件。）
dist：打包输出目录
node_modules：下载的依赖
src/assets：一些图片资源
src/components：一些自定义组件，扩展vuetify中没有的内容
src/pages：具体页面或页面中的组件
src/router/index.js：整个项目的路由跳转配置
src/App.Vue：根vue组件，其他组件在它内部渲染
src/config.js：全局的一些配置信息
src/http.js：ajax请求的相关配置
src/main.js：项目入口文件
src/menu.js：页面菜单中的假数据，后面按需修改
index.html：单页应用唯一的html
package.json：整个vue项目的依赖

理一下清index.html、main.js、App.vue和index.js之间的关系：
    index.html：html模板文件。定义了空的div，其id为app。
    main.js：实例化vue对象，并且通过id选择器绑定到index.html的div中，因此main.js的内容都将在index.html的div中显示。
main.js中使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。index.html引用它之后，就拥有了vue的内容（包括组件、样式等），
所以，main.js也是webpack打包的入口。
    index.js：定义请求路径和组件的映射关系。相当于之前的<vue-router>
    App.vue中也没有内容，而是定义了vue-router的锚点：<router-view>，vue-router路由后的组件将会在锚点展示。
最终结论：一切路由后的内容都将通过App.vue在index.html中显示。
访问流程：用户在浏览器输入路径，例如：http://localhost:9001/#/item/brand --> index.js(/item/brand路径对应pages/item/Brand.vue组件)
--> 该组件显示在App.vue的锚点位置 --> main.js使用了App.vue组件，并把该组件渲染在index.html文件中（id为“app”的div中）

Vuetify框架：
Vuetify基于Material Design（谷歌推出的多平台设计规范），几乎不需要任何CSS代码，拿来就可以用这里的UI组件

SwitchHosts!工具：
修改本地host文件的工具，可以伪造本地的hosts文件，实现对域名的解析。
在webpack.dev.conf.js中取消host验证：disableHostCheck: true，就可以使用域名代替localhost或者127.0.0.1进行访问了。


Nginx：反向代理服务器
域名问题解决了，但是现在要访问后台页面，还得自己加上端口：http://manage.handou.com:9001/，
我们希望的是直接通过域名访问，而不加端口号：http://manage.handou.com。但是不加端口号默认是80端口，如何才能把请求转移到9001端口呢？
可以使用web服务器Nginx。web服务器和web应用服务器的区别：
web应用服务器，如：
    tomcat
    resin
    jetty
web服务器，如：
    Apache 服务器
    Nginx
    IIS
区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。
并发：web服务器的并发能力远高于web应用服务器。

代理和反向代理：正向代理代理的对象时客户端，反向代理代理的对象时服务端。
代理：我们常说的代理就是正向代理，它隐藏了真实请求的客户端，客户端请求的服务都被代理服务器代替来请求，服务器端并不知道真实的客户端。
反向代理：反向代理隐藏了真正的服务端，当我们请求www.baidu.com时，百度可能有成千上万台服务器，具体哪一台正在为我们服务，我们无需知道，我们只需要知道反向代理服务器就可以了。

nginx可以当做反向代理服务器来使用：
    我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理
    当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能

nginx中的目录：
    1. conf：配置目录
    2. contrib：第三方依赖
    3. html：默认的静态资源目录，类似于tomcat的webapps
    4. logs：日志目录
    5. nginx.exe：启动程序。可双击运行，但不建议这么做。

启动nigin：start nginx
重新加载：nginx -s reload
停止：nginx -s stop

修改conf\nginx.conf中的配置：
server_name  改为 ：manage.handou.com
这样就可以在浏览器不输入端口号，直接使用域名就可以访问了，处理流程如下：
    1. 浏览器准备发起请求，访问http://manage.handou.com，但需要进行域名解析
    2. 优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1
    3. 请求被发往解析得到的ip，并且默认使用80端口：http://127.0.0.1:80，本机的nginx一直监听80端口，因此捕获这个请求
    4. nginx中配置了反向代理规则，将manage.handou.com代理到127.0.0.1:9001，因此请求被转发（nginx中有配置：proxy_pass http://127.0.0.1:9001;）
    5. 后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx
    6. nginx将得到的结果返回到浏览器


编写分类管理相关功能：/item/category
查询分类信息的访问路径：
    http://localhost:8081/category/list?pid=0
    http://api.handou.com/api/item/category/list?pid=0
    api形式的访问路径是在vue的src/config.js中配置的
    浏览器路径是：http://manage.handou.com:9001/#/item/category 但查询时的api路径是：http://api.handou.com/api/item/category/list?pid=0，造成了跨域访问问题。

跨域问题：
Access to XMLHttpRequest at 'http://api.handou.com/api/item/category/list?pid=0' from origin 'http://manage.handou.com:9001'
has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
跨域：浏览器对于javascript的同源策略的限制。下面几种情况都属于跨域：
    1、域名不同  www.jd.com 与 www.taobao.com
    2、端口不同  www.jd.com:8080 与 www.jd.com:8081
    3、二级域名不同 item.jd.com 与 miaosha.jd.com
    4、http和https也属于跨域
如果域名和端口都相同，但是请求路径不同，不属于跨域，如：
    www.jd.com/item
    www.jd.com/goods
跨域不一定都会有跨域问题：
因为跨域问题是浏览器对于ajax请求的一种安全限制：一个页面发起的ajax请求，只能是与当前页域名相同的路径，这能有效的阻止跨站攻击。因此，跨域问题 是针对ajax的一种限制。
但是这却给我们的开发带来了不便，而且在实际生产环境中，肯定会有很多台服务器之间交互，地址和端口都可能不同，这需要我们解决跨域问题。
解决跨域问题的方案：
Jsonp
  最早的解决方案，利用script标签可以跨域的原理实现。
  限制：
    需要服务的支持
    只能发起GET请求
nginx反向代理
  思路是：利用nginx把跨域反向代理为不跨域，支持各种请求方式
  缺点：需要在nginx进行额外配置，语义不清晰
CORS
  规范化的跨域请求解决方案，安全可靠。
  优势：
    在服务端进行控制是否允许跨域，可自定义规则
    支持各种请求方式
  缺点：
    会产生额外的请求

cors解决跨域：
CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。它允许浏览器向跨源服务器，
发出XMLHttpRequest(http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html)请求，
从而克服了AJAX只能同源(http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)使用的限制。
CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。
浏览器端：
    目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。
服务端：
    CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，
    我们需要以此判断是否允许其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。
浏览器会将ajax请求分为两类简单请求、特殊请求：
简单请求：
只要同时满足以下两大条件，就属于简单请求：
    (1)请求方法是以下三种方法之一：
        HEAD
        GET
        POST
    (2)HTTP的头信息不超出以下几种字段：
        Accept
        Accept-Language
        Content-Language
        Last-Event-ID
        Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain
当浏览器发现发起的ajax请求是简单请求时，会在请求头中携带一个字段：Origin: http://manage.handou.com:9001
Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。
如果服务器允许跨域，需要在返回的响应头中携带下面信息：
    Access-Control-Allow-Origin: http://manage.handou.com
    Access-Control-Allow-Credentials: true
    Content-Type: text/html; charset=utf-8
Access-Control-Allow-Origin：允许哪个域名进行跨域，是一个具体域名或者*（代表任意域名）
Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true
要想操作cookie，需要满足3个条件：
    服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。
    浏览器发起ajax需要指定withCredentials 为true
    响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名
特殊请求：
不符合简单请求的条件，会被浏览器判定为特殊请求,例如请求方式为PUT。
预检请求：
特殊请求会在正式通信之前，增加一次HTTP查询请求，称为"预检"请求(preflight)。
浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。
只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。
一个“预检”请求的样板：
    OPTIONS /cors HTTP/1.1
    Origin: http://manage.handou.com
    Access-Control-Request-Method: PUT
    Access-Control-Request-Headers: X-Custom-Header
    Host: api.handou.com
    Accept-Language: en-US
    Connection: keep-alive
    User-Agent: Mozilla/5.0...
与简单请求相比，除了Origin以外，多了两个头：
    Access-Control-Request-Method：接下来会用到的请求方式，比如PUT
    Access-Control-Request-Headers：会额外用到的头信息
预检请求的响应：
服务的收到预检请求，如果许可跨域，会发出响应：
    HTTP/1.1 200 OK
    Date: Mon, 01 Dec 2008 01:15:39 GMT
    Server: Apache/2.0.61 (Unix)
    Access-Control-Allow-Origin: http://manage.handou.com
    Access-Control-Allow-Credentials: true
    Access-Control-Allow-Methods: GET, POST, PUT
    Access-Control-Allow-Headers: X-Custom-Header
    Access-Control-Max-Age: 1728000
    Content-Type: text/html; charset=utf-8
    Content-Encoding: gzip
    Content-Length: 0
    Keep-Alive: timeout=2, max=100
    Connection: Keep-Alive
    Content-Type: text/plain
除了Access-Control-Allow-Origin和Access-Control-Allow-Credentials以外，这里又额外多出3个头：
    Access-Control-Allow-Methods：允许访问的方式
    Access-Control-Allow-Headers：允许携带的头
    Access-Control-Max-Age：本次许可的有效时长，单位是秒，过期之前的ajax请求就无需再次进行预检了
如果浏览器得到上述响应，则认定为可以跨域，后续就跟简单请求的处理是一样的了。

实现跨域访问：在网关（zuul）中编写一个配置类，并且注册CorsFilter：
SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter ,内部已经实现了刚才所讲的判定逻辑，我们直接用就好了。
服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。
在网关中创建一个CorsFilter的跨域访问过滤器类：HandouCorsConfiguration


前端异步查询工具axios
异步查询数据，自然是通过ajax查询，大家首先想起的肯定是jQuery。但jQuery与MVVM的思想不吻合，而且ajax只是jQuery的一小部分。
因此不可能为了发起ajax请求而去引用这么大的一个库。Vue官方推荐的ajax请求框架叫做：axios
axios的Get请求语法：
    axios.get("/item/category/list?pid=0") // 请求路径和请求参数拼接
        .then(function(resp){
            // 成功回调函数
        })
        .catch(function(){
            // 失败回调函数
        })
    // 参数较多时，可以通过params来传递参数
    axios.get("/item/category/list", {
            params:{
                pid:0
            }
        })
        .then(function(resp){})// 成功时的回调
        .catch(function(error){})// 失败时的回调

axios的POST请求语法：
比如新增一个用户
    axios.post("/user",{
            name:"Jack",
            age:21
        })
        .then(function(resp){})
        .catch(function(error){})
注意，POST请求传参，不需要像GET请求那样定义一个对象，在对象的params参数中传参。post()方法的第二个参数对象，就是将来要传递的参数
PUT和DELETE请求与POST请求类似
我们这里的使用是在：
    getDataFromServer() { // 从服务的加载数的方法。
        // 发起请求
        this.$http.get("/item/brand/page", {
          params: {
            key: this.search, // 搜索条件
            page: this.pagination.page,// 当前页
            rows: this.pagination.rowsPerPage,// 每页大小
            sortBy: this.pagination.sortBy,// 排序字段
            desc: this.pagination.descending// 是否降序
          }
        }).then(resp => { // 这里使用箭头函数
          this.brands = resp.data.items;
          this.totalBrands = resp.data.total;
          // 完成赋值后，把加载状态赋值为false
          this.loading = false;
        })
      }
我们这里没有使用axios而是使用了this.$http，因为我们在src/http.js中做了封装：
    // 将axios添加到 Vue的原型，这样一切vue实例都可以使用该对象
    Vue.prototype.$http = axios;


json对象转换为查询字符串
请求的数据格式是一个JSON对象，在controller中只能使用一个对象接收，不能使用两个参数接收，否则报400错误。
axios处理请求体的原则会根据请求数据的格式来定：
    如果请求体是对象：会转为json发送
    如果请求体是String：会作为普通表单请求发送，但需要我们自己保证String的格式是键值对。如：name=jack&age=12
可以使用QS工具，在前端将json数据转换为请求参数字符串
    QS是一个第三方库，我们可以用 npm install qs --save 来安装。
    QS，即Query String，请求参数字符串。例如： name=jack&age=21
    QS工具可以便捷的实现 JS的Object与QueryString的转换。
    data: this.$qs.stringify(params)
    parse()方法可以将查询字符串转换为json对象


图片等大文件传输绕过网关
图片上传是文件的传输，如果也经过Zuul网关的代理，文件就会经过多次网路传输，造成不必要的网络负担。
在高并发时，可能导致网络阻塞，Zuul网关不可用。这样我们的整个系统就瘫痪了。所以，我们上传文件的请求就不经过网关来处理了。
1、Zuul的路由过滤：
Zuul中提供了一个 ignored-patterns 属性，用来忽略不希望路由的URL路径，示例：
    zuul.ignored-patterns: /upload/**
路径过滤会对一切微服务进行判定。
Zuul还提供了 ignored-services 属性，进行服务过滤：
    zuul.ignored-services: upload-servie
我们这里采用忽略服务：
    zuul:
    ignored-services:
        - upload-service # 忽略upload-service服务
上面的配置采用了集合语法，代表可以配置多个。
2、上面的配置还是经过了网关，不是理想效果，我们希望是绕过网关：
修改nginx反向代理的配置文件：
    server {
        listen       80;
        server_name  api.handou.com;

        proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		location /api/upload {
			proxy_pass http://127.0.0.1:8082;
			proxy_connect_timeout 600;
			proxy_read_timeout 600;

			rewrite "^/api/(.*)$" /$1 break;
		}

		location / {
			proxy_pass http://127.0.0.1:10010;
			proxy_connect_timeout 600;
			proxy_read_timeout 600;
		}
    }
图片上传的api请求路径为：http://api.handou.com/api/upload/image
我们修改nginx配置文件，希望后缀是/api/upload/* 的所有请求直接转发到图片服务器的8082端口，而不转到网关的10010端口。
但这样转发后的路径变为了：http://localhost:8082/api/upload/image 而我们服务器配置的路径为 http://localhost:8082/upload/image
多了一个 /api 这需要nginx的rewrite指令来对地址进行重写：
语法格式：
    rewrite "用来匹配路径的正则" 重写后的路径 [指令];
我们这里是：
    rewrite "^/api/(.*)$" /$1 break;
路径重写：
    "^/api/(.*)$"：匹配路径的正则表达式，用了分组语法，把/api/以后的所有部分当做1组
    /$1：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即/api/后面的所有。这样新的路径就是除去/api/以外的所有，就达到了去除/api 前缀的目的
break：指令，常用的有2个，分别是：last、break
    last：重写路径结束后，将得到的路径重新进行一次路径匹配
    break：重写路径结束后，不再重新匹配路径。
    我们这里不能选择last，否则以新的路径/upload/image来匹配，就不会被正确的匹配到8082端口了
重启nginx后，还是不能正常访问，因为从 http://manage.handou.com/#/item/brand 到 http://api.handou.com/api/upload/image 存在跨域问题，
需要在handou-upload项目中新增 HandouCorsConfiguration 跨域访问配置类。


FastDFS
分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。
传统文件系统管理的文件就存储在本机。
分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问
FastDFS是由淘宝的余庆先生所开发的一个轻量级、高性能的开源分布式文件系统。用纯C语言开发，功能丰富：
    文件存储
    文件同步
    文件访问（上传、下载）
    存取负载均衡
    在线扩容
适合有大容量存储需求的应用或系统。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。
FastDFS两个主要的角色：Tracker Server 和 Storage Server 。
    Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，
        和记录storage节点的运行状态，是连接client和storage节点的枢纽。
    Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动
        向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息
    Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，
        起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。
    Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。
    Storage Cluster ：存储集群，有多个Group组成。
上传流程：
    1. Client通过Tracker server查找可用的Storage server。
    2. Tracker server向Client返回一台可用的Storage server的IP地址和端口号。
    3. Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。
    4. 上传完成，Storage server返回Client一个文件ID，文件上传结束。
下载流程：
    1. Client通过Tracker server查找要下载文件所在的的Storage server。
    2. Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。
    3. Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。
    4. 下载文件成功。


centOS配置
设置主机名
vim /etc/sysconfig/network
cat /etc/sysconfig/network
hostname Figo_centOS
vim /etc/hosts
cat /etc/hosts

增加用户
adduser handou
passwd handou
chmod -v u+w /etc/sudoers
vim /etc/sudoers
hanodu    ALL=(ALL)    ALL
chmod -v u-w /etc/sudoers

安装必要软件
yum -y install gcc
yum install -y unzip zip
yum -y install libevent

解压并安装上传的软件
unzip libfastcommon-master.zip
cd libfastcommon-master
./make.sh
./make.sh install
tar -zxvf FastDFS_v5.08.tar.gz
cd FastDFS
./make.sh
./make.sh install
ll /etc/init.d/ | grep fdfs

查看并关闭防火墙
service iptables status
chkconfig iptables off

编辑tracker配置并启动
cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf
vim /etc/fdfs/tracker.conf
    base_path=/handou/tracker
mkdir -p /handou/tracker
service fdfs_trackerd start
chkconfig fdfs_trackerd on
ps -ef | grep fdfs

编辑storage配置并启动
cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf
vim /etc/fdfs/storage.conf
    base_path=/leyou/storage
    store_path0=/leyou/storage
    tracker_server=192.144.163.25:22122
mkdir -p /handou/storage
service fdfs_storaged start
chkconfig fdfs_storaged on
ps -ef | grep fdfs

安装fastdfs-nginx-module
tar -zxvf fastdfs-nginx-module_v1.16.tar.gz
cd fastdfs-nginx-module/src/
vim config
    :%s+/usr/local/+/usr/+g

配置nginx与FastDFS关联配置文件
cp /usr/local/handou/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/
vim /etc/fdfs/mod_fastdfs.conf
    connect_timeout=20
    tracker_server=192.144.163.25:22122
    url_have_group_name=true
    store_path0=/handou/storage

复制 FastDFS 的部分配置文件到/etc/fdfs 目录
cd /usr/local/handou/FastDFS/conf/
cp http.conf mime.types /etc/fdfs/

安装Nginx的插件
yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel
tar -zxvf nginx-1.10.0.tar.gz
cd nginx-1.10.0
./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/usr/local/handou/fastdfs-nginx-module/src
make && make install
vim  /opt/nginx/conf/nginx.conf
    server {
        listen       80;
        server_name  image.handou.com;

    	# 监听域名中带有group的，交给FastDFS模块处理
        location ~/group([0-9])/ {
            ngx_fastdfs_module;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

启动nginx并设置开机自启
nginx
nginx -s stop
nginx -s reload
ps -ef | grep nginx
vim /etc/init.d/nginx
    #!/bin/sh
    #
    # nginx - this script starts and stops the nginx daemon
    #
    # chkconfig:   - 85 15
    # description:  NGINX is an HTTP(S) server, HTTP(S) reverse \
    #               proxy and IMAP/POP3 proxy server
    # processname: nginx
    # config:      /etc/nginx/nginx.conf
    # config:      /etc/sysconfig/nginx
    # pidfile:     /var/run/nginx.pid

    # Source function library.
    . /etc/rc.d/init.d/functions

    # Source networking configuration.
    . /etc/sysconfig/network

    # Check that networking is up.
    [ "$NETWORKING" = "no" ] && exit 0

    nginx="/usr/bin/nginx"
    prog=$(basename $nginx)

    NGINX_CONF_FILE="/opt/nginx/conf/nginx.conf"

    [ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx

    lockfile=/var/lock/subsys/nginx

    make_dirs() {
    # make required directories
    user=`$nginx -V 2>&1 | grep "configure arguments:.*--user=" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
    if [ -n "$user" ]; then
        if [ -z "`grep $user /etc/passwd`" ]; then
            useradd -M -s /bin/nologin $user
        fi
        options=`$nginx -V 2>&1 | grep 'configure arguments:'`
        for opt in $options; do
            if [ `echo $opt | grep '.*-temp-path'` ]; then
                value=`echo $opt | cut -d "=" -f 2`
                if [ ! -d "$value" ]; then
                    # echo "creating" $value
                    mkdir -p $value && chown -R $user $value
                fi
            fi
        done
        fi
    }

    start() {
        [ -x $nginx ] || exit 5
        [ -f $NGINX_CONF_FILE ] || exit 6
        make_dirs
        echo -n $"Starting $prog: "
        daemon $nginx -c $NGINX_CONF_FILE
        retval=$?
        echo
        [ $retval -eq 0 ] && touch $lockfile
        return $retval
    }

    stop() {
        echo -n $"Stopping $prog: "
        killproc $prog -QUIT
        retval=$?
        echo
        [ $retval -eq 0 ] && rm -f $lockfile
        return $retval
    }

    restart() {
        configtest || return $?
        stop
        sleep 1
        start
    }

    reload() {
        configtest || return $?
        echo -n $"Reloading $prog: "
        killproc $nginx -HUP
        RETVAL=$?
        echo
    }

    force_reload() {
        restart
    }

    configtest() {
    $nginx -t -c $NGINX_CONF_FILE
    }

    rh_status() {
        status $prog
    }

    rh_status_q() {
        rh_status >/dev/null 2>&1
    }

    case "$1" in
        start)
            rh_status_q && exit 0
            $1
            ;;
        stop)
            rh_status_q || exit 0
            $1
            ;;
        restart|configtest)
            $1
            ;;
        reload)
            rh_status_q || exit 7
            $1
            ;;
        force-reload)
            force_reload
            ;;
        status)
            rh_status
            ;;
        condrestart|try-restart)
            rh_status_q || exit 0
                ;;
        *)
            echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
            exit 2
    esac

修改权限
chmod 777 /etc/init.d/nginx
添加到服务列表
chkconfig --add /etc/init.d/nginx
设置开机启动
chkconfig nginx on


FastDFS开源的java客户端
https://github.com/tobato/FastDFS_Client
