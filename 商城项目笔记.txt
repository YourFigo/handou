电商行业的一些常见模式：
    B2C：商家对个人，如：亚马逊、当当等
    C2C平台：个人对个人，如：闲鱼、拍拍网、ebay
    B2B平台：商家对商家，如：阿里巴巴、八方资源网等
    O2O：线上和线下结合，如：饿了么、电影票、团购等
    P2P：在线金融，贷款，如：网贷之家、人人聚财等。
    B2C平台：天猫、京东、一号店等

一些专业术语
SaaS：软件即服务
SOA：面向服务
RPC：远程过程调用
RMI：远程方法调用
PV：(page view)，即页面浏览量；
    用户每1次对网站中的每个网页访问均被记录1次。用户对同一页面的多次访问，访问量累计
UV：(unique visitor)，独立访客
    指访问某个站点或点击某条新闻的不同IP地址的人数。在同一天内，uv只记录第一次进入网站的具有独立IP的访问者，在同一天内再次访问该网站则不计数。
PV与带宽：
    计算带宽大小需要关注两个指标：峰值流量和页面的平均大小。
    计算公式是：网站带宽= ( PV * 平均页面大小（单位MB）* 8 )/统计时间（换算到秒）
    为什么要乘以8？
    网站大小为单位是字节(Byte)，而计算带宽的单位是bit，1Byte=8bit
    这个计算的是平均带宽，高峰期还需要扩大一定倍数
PV、QPS、并发
    QPS：每秒处理的请求数量。
    比如你的程序处理一个请求平均需要0.1S，那么1秒就可以处理10个请求。QPS自然就是10，多线程情况下，这个数字可能就会有所增加。
    由PV和QPS如何需要部署的服务器数量？
    根据二八原则，80%的请求集中在20%的时间来计算峰值压力：
    （每日PV * 80%） / （3600s * 24 * 20%） * 每个页面的请求数  = 每个页面每秒的请求数量
    然后除以服务器的QPS值，即可计算得出需要部署的服务器数量


环境：
jdk 1.8
maven 3.5
springboot 2.0
springcloud Finchley.SR2
mybatis 1.3


模块：
handou：项目整体父工程
handou-registry：服务注册中心（eureka）
handou-gateway：网关和过滤器（zuul）
handou-item：商品聚合模块
    handou-item-interface：负责商品模块对外接口的子模块
    handou-item-service：负责商品模块对内业务的子模块
handou-common：通用工具类模块
handou-manage-web：商城后台管理平台的前端Vue页面

导入 handou-manage-web 项目
package.json中定义了我们所需的一切依赖，安装依赖需要在控制台运行命令：
    npm install
安装好依赖后，可以在package.json中启动项目，运行：
    npm run dev

看一下handou-manage-web的目录结构：
handou-manage-web
├─build
├─config
├─dist
├─node_modules
├─src
│  ├─assets
│  ├─components
│  │  ├─cascader
│  │  ├─form
│  │  ├─messages
│  │  └─tree
│  ├─pages
│  │  ├─item
│  │  │  └─specification
│  │  ├─trade
│  │  └─user
│  ├─router
│  │  └─index.js
│  ├─App.vue
│  ├─config.js
│  ├─http.js
│  ├─main.js
│  └─mune.js
├─static
├─index.html
└─package.json

理一下清index.html、main.js、App.vue和index.js之间的关系：
    index.html：html模板文件。定义了空的div，其id为app。
    main.js：实例化vue对象，并且通过id选择器绑定到index.html的div中，因此main.js的内容都将在index.html的div中显示。
main.js中使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。index.html引用它之后，就拥有了vue的内容（包括组件、样式等），
所以，main.js也是webpack打包的入口。
    index.js：定义请求路径和组件的映射关系。相当于之前的<vue-router>
    App.vue中也没有内容，而是定义了vue-router的锚点：<router-view>，vue-router路由后的组件将会在锚点展示。
最终结论：一切路由后的内容都将通过App.vue在index.html中显示。
访问流程：用户在浏览器输入路径，例如：http://localhost:9001/#/item/brand --> index.js(/item/brand路径对应pages/item/Brand.vue组件)
--> 该组件显示在App.vue的锚点位置 --> main.js使用了App.vue组件，并把该组件渲染在index.html文件中（id为“app”的div中）

